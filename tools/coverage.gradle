apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.7.7.201606060606'
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

final testBuildType = 'coverageTest'

task jacocoTestReport(type: JacocoReport
        , dependsOn: ["test${testBuildType.capitalize()}UnitTest",
                      "create${testBuildType.capitalize()}CoverageReport"]
) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['androidJacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/*Test*.*','**/Manifest*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/${testBuildType}", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: ["jacoco/test${testBuildType.capitalize()}UnitTest.exec",
                                                          "outputs/code-coverage/connected/*coverage.ec"
    ])

    doFirst {
        new File("$buildDir/intermediates/classes/${testBuildType}").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    doLast {
        println "jacoco report has been generated to file://${reports.html.destination}/index.html"
    }
}